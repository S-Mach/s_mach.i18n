= s_mach.i18n: Internationalization library
Lance Gatlin <lance.gatlin@gmail.com>
v1,27-Apr-16
:blogpost-status: unpublished
:blogpost-categories: s_mach, scala

image:https://travis-ci.org/S-Mach/s_mach.i18n.svg[Build Status, link="https://travis-ci.org/S-Mach/s_mach.i18n"]
image:https://coveralls.io/repos/S-Mach/s_mach.i18n/badge.png[Test Coverage,link="https://coveralls.io/r/S-Mach/s_mach.i18n"]
image:https://api.codacy.com/project/badge/grade/cf9048205e154e8a9e01244de497db25[Codacy Badge,link="https://www.codacy.com/public/lancegatlin/s_mach.i18n"]
https://github.com/S-Mach/s_mach.i18n[Code]
http://s-mach.github.io/s_mach.i18n/#s_mach.i18n.package[Scaladoc]

+s_mach.i18n+ is an open-source Scala library for internationalization.


== Include in SBT
1. Add to +build.sbt+
+
[source,sbt,numbered]
----
libraryDependencies += "net.s_mach" %% "i18n" % "1.0.0"
----
NOTE: +s_mach.i18n+ is currently only compiled for Scala 2.11 (though 2.10.4
support can be added if there is interest)

== Versioning
+s_mach.i18n+ uses semantic versioning (http://semver.org/). +s_mach.i18n+
does not use the package private modifier. Instead, all code files outside of
the +s_mach.i18n.impl+ package form the public interface and are governed by
the rules of semantic versioning. Code files inside the +s_mach.i18n.impl+
package may be used by downstream applications and libraries. However, no
guarantees are made as to the stability or interface of code in the
+s_mach.i18n.impl+ package between versions.

== Overview

+s_mach.i18n+ is an internationalization (i18n) library that provides a compile-time
guarantee of proper internationalization by requiring all i18n
methods to require and return +I18NString+ (a distinct type alias for String). +s_mach.i18n+
also provides:

* The I18N type-class which can format an instance of a type to an I18NString. Implementations
for all built-in types are provided.
* +i18n+ string interpolator (similar to s interpolator) which provides syntatic sugar
for automatically formatting interpolated values as I18NStrings.
* +UTF8Messages+, a wrapper around Java resource bundles, that loads bundles of
message files (named by their locale) from all jars located on the classpath. These
message files contain a simple message key to message format lookup on each line.

== Example (EN)

----
scala> :paste
// Entering paste mode (ctrl-D to finish)

import java.util.Locale
import s_mach.i18n._
import s_mach.i18n.messages._

// Uses UTF8Messages by default
implicit val i18ncfg = I18NConfig(Locale.ENGLISH)

// Create a message with the key m_test that accepts 2 arguments, an Int and an I18NString
val m_test = 'm_test.m[Int,I18NString]

// Using i18ncfg, resolve the message key to a message format and interpolate the arguments
// Note: the Int argument is automatically converted to I18NString by invoking the
// I18N[Int] type-class
val test_message_lookup = m_test(1,"test".asI18N)

// Note: the Double argument is automatically converted to I18NString by invoking the
// I18N[Double] type-class
val test_i18n_str = i18n"interpolate some arguments $test_message_lookup ${25.0}"

// Exiting paste mode, now interpreting.

import java.util.Locale
import s_mach.i18n._
import s_mach.i18n.messages._
i18ncfg: s_mach.i18n.I18NConfig = I18NConfig(Messages(keys=test_key,m_false,fmt_test1_key,m_true,fmt_choice_key,fmt_test2_key,m_test),StrictInterpolator,StrictMessageResolver,DefaultStdI18N)
m_test: s_mach.i18n.messages.Message2[Int,s_mach.i18n.I18NString] = Message2('m_test)
test_message_lookup: s_mach.i18n.I18NString = this is a test message format that accepts two arguments 1 and test
test_i18n_str: String with s_mach.i18n.I18NStringTag with s_mach.codetools.IsDistinctTypeAlias[String] = interpolate some arguments this is a test message format that accepts two arguments 1 and test 25

scala>
----
Message files for above example https://github.com/S-Mach/s_mach.i18n/tree/master/src/test/resources/conf[here]

== Example (FR)

----
scala> :paste
// Entering paste mode (ctrl-D to finish)

import java.util.Locale
import s_mach.i18n._
import s_mach.i18n.messages._

// Uses UTF8Messages by default
implicit val i18ncfg = I18NConfig(Locale.FRENCH)

// Create a message with the key m_test that accepts 2 arguments, an Int and an I18NString
val m_test = 'm_test.m[Int,I18NString]

// Using i18ncfg, resolve the message key to a message format and interpolate the arguments
// Note: the Int argument is automatically converted to I18NString by invoking the
// I18N[Int] type-class
val test_message_lookup = m_test(1,"test".asI18N)

// Note: the Double argument is automatically converted to I18NString by invoking the
// I18N[Double] type-class
val test_i18n_str = i18n"nous allons interpoler certains arguments $test_message_lookup ${25.0}"


// Exiting paste mode, now interpreting.

import java.util.Locale
import s_mach.i18n._
import s_mach.i18n.messages._
i18ncfg: s_mach.i18n.I18NConfig = I18NConfig(Messages(keys=test_key,m_false,fmt_test1_key,m_true,fmt_choice_key,fmt_test2_key,m_test),StrictInterpolator,StrictMessageResolver,DefaultStdI18N)
m_test: s_mach.i18n.messages.Message2[Int,s_mach.i18n.I18NString] = Message2('m_test)
test_message_lookup: s_mach.i18n.I18NString = c'est un format de message de test qui accepte deux arguments 1 et test
test_i18n_str: String with s_mach.i18n.I18NStringTag with s_mach.codetools.IsDistinctTypeAlias[String] = nous allons interpoler certains arguments c'est un format de message de test qui accepte deux arguments 1 et test 25

scala>
----
Message files for above example https://github.com/S-Mach/s_mach.i18n/tree/master/src/test/resources/conf[here]