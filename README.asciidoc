= s_mach.i18n: Internationalization library
Lance Gatlin <lance.gatlin@gmail.com>
v1,27-Apr-16
:blogpost-status: unpublished
:blogpost-categories: s_mach, scala

image:https://travis-ci.org/S-Mach/s_mach.i18n.svg[Build Status, link="https://travis-ci.org/S-Mach/s_mach.i18n"]
image:https://coveralls.io/repos/S-Mach/s_mach.i18n/badge.png[Test Coverage,link="https://coveralls.io/r/S-Mach/s_mach.i18n"]
image:https://api.codacy.com/project/badge/grade/cf9048205e154e8a9e01244de497db25[Codacy Badge,link="https://www.codacy.com/public/lancegatlin/s_mach.i18n"]
https://github.com/S-Mach/s_mach.i18n[Code]
http://s-mach.github.io/s_mach.i18n/#s_mach.i18n.package[Scaladoc]

+s_mach.i18n+ is an open-source Scala library for internationalization.


== Include in SBT
1. Add to +build.sbt+
+
[source,sbt,numbered]
----
libraryDependencies += "net.s_mach" %% "i18n" % "1.0.0"
----
NOTE: +s_mach.i18n+ is currently only compiled for Scala 2.11 (though 2.10.4
support can be added if there is interest)

== Versioning
+s_mach.i18n+ uses semantic versioning (http://semver.org/). +s_mach.i18n+
does not use the package private modifier. Instead, all code files outside of
the +s_mach.i18n.impl+ package form the public interface and are governed by
the rules of semantic versioning. Code files inside the +s_mach.i18n.impl+
package may be used by downstream applications and libraries. However, no
guarantees are made as to the stability or interface of code in the
+s_mach.i18n.impl+ package between versions.

== Overview

+s_mach.i18n+ is an internationalization (i18n) library that provides
compile-time guarantee of proper internationalization by requiring all i18n
strings printed by the +I18N+ type-class to be of type +I18NString+, a distinct
type alias for String. Additionally, to prevent non-internationalized strings
from being accidentally interpolated in messages, all interpolations require
+I18NString+ (Strings may always be explicitly converted to +I18NString+).

In addition to type-safety, +s_mach.i18n+ provides +UTF8Messages+, a wrapper
around Java resource bundles that loads bundles of resources containing message
formats by locale from all jars located on the classpath.

== Examples

----

import java.util.Locale

// Uses UTF8Messages by default
implicit val i18ncfg = I18NConfig(Locale.US)

// Create a message with they key m_test that accepts 2 arguments, an Int and an I18NString
val m_test = 'm_test.m[Int,I18NString]

// Using i18ncfg, resolve the message key to a message format and interpolate the arguments
val test_i18n_str = m_test(1,"test".asI18N)

i18n"interpolate some arguments $test_i18n_str ${25.0}"

----
